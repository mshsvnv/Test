// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "src/internal/dto"

	mock "github.com/stretchr/testify/mock"

	model "src/internal/model"
)

// IFeedbackService is an autogenerated mock type for the IFeedbackService type
type IFeedbackService struct {
	mock.Mock
}

// CreateFeedback provides a mock function with given fields: ctx, req
func (_m *IFeedbackService) CreateFeedback(ctx context.Context, req *dto.CreateFeedbackReq) (*model.Feedback, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeedback")
	}

	var r0 *model.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateFeedbackReq) (*model.Feedback, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateFeedbackReq) *model.Feedback); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateFeedbackReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFeedback provides a mock function with given fields: ctx, req
func (_m *IFeedbackService) DeleteFeedback(ctx context.Context, req *dto.DeleteFeedbackReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeedback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.DeleteFeedbackReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFeedbacksByRacketID provides a mock function with given fields: ctx, racketID
func (_m *IFeedbackService) GetFeedbacksByRacketID(ctx context.Context, racketID int) ([]*model.Feedback, error) {
	ret := _m.Called(ctx, racketID)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedbacksByRacketID")
	}

	var r0 []*model.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.Feedback, error)); ok {
		return rf(ctx, racketID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.Feedback); ok {
		r0 = rf(ctx, racketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, racketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeedbacksByUserID provides a mock function with given fields: ctx, userID
func (_m *IFeedbackService) GetFeedbacksByUserID(ctx context.Context, userID int) ([]*model.Feedback, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedbacksByUserID")
	}

	var r0 []*model.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.Feedback, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.Feedback); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFeedbackService creates a new instance of IFeedbackService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFeedbackService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFeedbackService {
	mock := &IFeedbackService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
